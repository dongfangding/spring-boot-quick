<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration  scan="true" scanPeriod="10 seconds">

    <!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->

    <contextName>logback</contextName>
    <springProperty scope="context" name="LOG_HOME" source="logging.file.path"/>
    <springProperty scope="context" name="APPLICATION_NAME" source="spring.application.name"/>
    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 white,magenta,highlight,cyan表示颜色-->
            <pattern>%white(%date{yyyy-MM-dd HH:mm:ss.SSS}) %highlight(%-5level) %magenta(%thread) %cyan(%logger{56}.%M[%L]) [%5line] [%X{userId}]: %msg%n</pattern>
            <!--            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %-5level | %thread | %logger{56} | %msg%n</pattern>-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!--    &lt;!&ndash; 时间滚动输出 level为 INFO 日志 &ndash;&gt;-->
    <springProfile name="dev,uat,prod,test">
        <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 正在记录的日志文件的路径及文件名 -->
            <!--        <file>${log.path}/log_info.log</file>-->
            <!--日志文件输出格式-->
            <encoder>
                <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %logger{56}  [%5line]  [%X{userId}] %msg%n</pattern>
                <charset>UTF-8</charset>
            </encoder>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 每天日志归档路径以及格式 -->
                <fileNamePattern>${LOG_HOME}/${APPLICATION_NAME}/info/${APPLICATION_NAME}-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <!--日志最大数据-->
                <maxFileSize>1GB</maxFileSize>
                <!--日志最大保留天数数据-->
                <MaxHistory>7</MaxHistory>
                <!--                用来指定日志文件的上限大小，例如设置为5GB的话，那么到了这个值，就会删除旧的日志-->
                <totalSizeCap>10GB</totalSizeCap>
                <cleanHistoryOnStart>true</cleanHistoryOnStart>
            </rollingPolicy>
            <!-- 此日志文件只记录info级别的  LevelFilter -->
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>info</level>
            </filter>
        </appender>

        <!--    &lt;!&ndash; 时间滚动输出 level为 ERROR 日志 &ndash;&gt;-->
        <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--日志文件输出格式-->
            <encoder>
                <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %logger{56}  [%5line]  [%X{userId}] %msg%n</pattern>
                <charset>UTF-8</charset> <!-- 此处设置字符集 -->
            </encoder>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOG_HOME}/${APPLICATION_NAME}/error/${APPLICATION_NAME}-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>

                <!--日志最大数据-->
                <maxFileSize>1GB</maxFileSize>
                <!--日志最大保留天数数据-->
                <MaxHistory>7</MaxHistory>
                <!--                用来指定日志文件的上限大小，例如设置为5GB的话，那么到了这个值，就会删除旧的日志-->
                <totalSizeCap>10GB</totalSizeCap>
                <cleanHistoryOnStart>true</cleanHistoryOnStart>

            </rollingPolicy>
            <!-- 此日志文件只记录ERROR级别的 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>

        <!--sql日志-->
        <appender name="SQL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 正在记录的日志文件的路径及文件名 -->
            <!--        <file>${log.path}/log_info.log</file>-->
            <!--日志文件输出格式-->
            <encoder>
                <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %logger{56}  [%5line]  [%X{userId}] %msg%n</pattern>
                <charset>UTF-8</charset>
            </encoder>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 每天日志归档路径以及格式 -->
                <fileNamePattern>${LOG_HOME}/${APPLICATION_NAME}/sql/${APPLICATION_NAME}-sql-%d{yyyy-MM-dd}.%i.log</fileNamePattern>

                <!--日志最大数据-->
                <maxFileSize>1GB</maxFileSize>
                <!--日志最大保留天数数据-->
                <MaxHistory>7</MaxHistory>
                <!--                用来指定日志文件的上限大小，例如设置为5GB的话，那么到了这个值，就会删除旧的日志-->
                <totalSizeCap>10GB</totalSizeCap>
                <cleanHistoryOnStart>true</cleanHistoryOnStart>

            </rollingPolicy>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>debug</level>
            </filter>
        </appender>
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="ERROR_FILE" />
        </root>
    </springProfile>

    <springProfile name="local">
        <root level="info">
            <appender-ref ref="CONSOLE" />
        </root>
    </springProfile>

</configuration>
